// Code generated by counterfeiter. DO NOT EDIT.
package devofakes

import (
	"sync"

	devo "github.com/xanderflood/dev-o"
)

type FakeWatcher struct {
	WasUpdatedStub        func(update ...struct{}) bool
	wasUpdatedMutex       sync.RWMutex
	wasUpdatedArgsForCall []struct {
		update []struct{}
	}
	wasUpdatedReturns struct {
		result1 bool
	}
	wasUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWatcher) WasUpdated(update ...struct{}) bool {
	fake.wasUpdatedMutex.Lock()
	ret, specificReturn := fake.wasUpdatedReturnsOnCall[len(fake.wasUpdatedArgsForCall)]
	fake.wasUpdatedArgsForCall = append(fake.wasUpdatedArgsForCall, struct {
		update []struct{}
	}{update})
	fake.recordInvocation("WasUpdated", []interface{}{update})
	fake.wasUpdatedMutex.Unlock()
	if fake.WasUpdatedStub != nil {
		return fake.WasUpdatedStub(update...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.wasUpdatedReturns.result1
}

func (fake *FakeWatcher) WasUpdatedCallCount() int {
	fake.wasUpdatedMutex.RLock()
	defer fake.wasUpdatedMutex.RUnlock()
	return len(fake.wasUpdatedArgsForCall)
}

func (fake *FakeWatcher) WasUpdatedArgsForCall(i int) []struct{} {
	fake.wasUpdatedMutex.RLock()
	defer fake.wasUpdatedMutex.RUnlock()
	return fake.wasUpdatedArgsForCall[i].update
}

func (fake *FakeWatcher) WasUpdatedReturns(result1 bool) {
	fake.WasUpdatedStub = nil
	fake.wasUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeWatcher) WasUpdatedReturnsOnCall(i int, result1 bool) {
	fake.WasUpdatedStub = nil
	if fake.wasUpdatedReturnsOnCall == nil {
		fake.wasUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.wasUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.wasUpdatedMutex.RLock()
	defer fake.wasUpdatedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ devo.Watcher = new(FakeWatcher)
