// Code generated by counterfeiter. DO NOT EDIT.
package devofakes

import (
	"sync"

	devo "github.com/xanderflood/dev-o"
)

type FakeWatcher struct {
	LoadStateStub        func() (devo.SubjectState, error)
	loadStateMutex       sync.RWMutex
	loadStateArgsForCall []struct{}
	loadStateReturns     struct {
		result1 devo.SubjectState
		result2 error
	}
	loadStateReturnsOnCall map[int]struct {
		result1 devo.SubjectState
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWatcher) LoadState() (devo.SubjectState, error) {
	fake.loadStateMutex.Lock()
	ret, specificReturn := fake.loadStateReturnsOnCall[len(fake.loadStateArgsForCall)]
	fake.loadStateArgsForCall = append(fake.loadStateArgsForCall, struct{}{})
	fake.recordInvocation("LoadState", []interface{}{})
	fake.loadStateMutex.Unlock()
	if fake.LoadStateStub != nil {
		return fake.LoadStateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadStateReturns.result1, fake.loadStateReturns.result2
}

func (fake *FakeWatcher) LoadStateCallCount() int {
	fake.loadStateMutex.RLock()
	defer fake.loadStateMutex.RUnlock()
	return len(fake.loadStateArgsForCall)
}

func (fake *FakeWatcher) LoadStateReturns(result1 devo.SubjectState, result2 error) {
	fake.LoadStateStub = nil
	fake.loadStateReturns = struct {
		result1 devo.SubjectState
		result2 error
	}{result1, result2}
}

func (fake *FakeWatcher) LoadStateReturnsOnCall(i int, result1 devo.SubjectState, result2 error) {
	fake.LoadStateStub = nil
	if fake.loadStateReturnsOnCall == nil {
		fake.loadStateReturnsOnCall = make(map[int]struct {
			result1 devo.SubjectState
			result2 error
		})
	}
	fake.loadStateReturnsOnCall[i] = struct {
		result1 devo.SubjectState
		result2 error
	}{result1, result2}
}

func (fake *FakeWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadStateMutex.RLock()
	defer fake.loadStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ devo.Watcher = new(FakeWatcher)
